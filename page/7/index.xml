<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kaka's Blog</title><link>https://kaka-lin.github.io/my-blog/</link><description>Recent content on Kaka's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 11 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kaka-lin.github.io/my-blog/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Operate System (OS) I/O Models: ÂêåÊ≠•„ÄÅÈùûÂêåÊ≠•„ÄÅÈòªÂ°û„ÄÅÈùûÈòªÂ°û Concurrency(‰∏¶Ë°å) Ëàá Parallelism(Âπ≥Ë°å) Corotuine(ÂçîÁ®ã)</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Papers All papers of my reading
Top Conference CVPR # Paper Links 1 Learning in the Frequency Domain slides 2 CARS: Contunuous Evolution for Efficient Neural Architecture Search slides 3 High Frequency Component Helps Explain the Generalization of Convolutional Neural Networks slides 4 YUVMultiNet: Real-time YUV multi-task CNN for autonomous driving slides AAAI # Paper Links 1 Distance-IoU Loss: Faster and Better Learning for Bounding Box Regression slides 2 Pruning from Scratch slides ICLR # Paper Links 1 Once for All: Train One Network and Specialize it for Efficient Deployment slides</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/00_install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/00_install/</guid><description>Ch0 - Install Point Cloud Libraries C++ version Python version Point Cloud Library Install on the platform Linux Run with Docker Build $ docker build --rm -f pcl.Dockerfile -t kakalin/pcl:1.8.0 . Run $ xhost +local:root $ docker run --rm -it \ --gpus all \ -e DISPLAY=$DISPLAY \ -e QT_X11_NO_MITSHM=1 \ --volume=&amp;quot;$PWD:/root/PCL&amp;quot; \ --volume=&amp;quot;/tmp/.X11-unix:/tmp/.X11-unix:rw&amp;quot; \ --privileged \ kakalin/pcl:1.8.0 python-pcl Requirements Python 2.7.6, 3.5.x pcl 1.8.1 (apt install) Cython &amp;lt;= 0.25.2 Install</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Ch1 - Visualization Result Usage C++ Version Run With docker (Optional) $ xhost +local:root $ docker run --rm -it \ --gpus all \ -e DISPLAY=$DISPLAY \ -e QT_X11_NO_MITSHM=1 \ --volume=&amp;quot;$PWD:/root/PCL&amp;quot; \ --volume=&amp;quot;/tmp/.X11-unix:/tmp/.X11-unix:rw&amp;quot; \ --privileged \ kakalin/pcl:1.8.0 Build &amp;amp;&amp;amp; Run $ chmod +x build.sh # Build ÔºÑ ./build.sh # Run $ cd build $ ./cloud_viewer Python version $ python3 visiualization.py</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Point Cloud Libraries (PCL) Introduction Table of Contents 00. Install Point Cloud Libraries 01. Visualization</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/common_packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/common_packages/</guid><description>Install Common Packages After you installed python.
$ pip install numpy scipy pandas matplotlib seaborn pillow scikit-learn mlxtend # or $ pip install -r requirements.txt</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Python Learning Notes Table of Contents 00. Install Python Windows macOS Ubuntu 01. Python Basics 01. Python Basics 02. Flow Control 03. List 04. Dictionary 05. Function 02. Process Management 01. Multithread (Â§öÂü∑Ë°åÁ∑í) 02. Multiprocessing (Â§öÁ®ãÂ∫è) 03. Coroutine (ÂçîÁ®ã) 03-1. Generator (ÁîüÊàêÂô®)</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Painting in Qt5 Example of how to render image in Qt or PyQt5
Knowledge 01 Paint System</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Qt/Qml Learning Notes Painting in Qt5</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>React React official website
Learn Notes 01. Hello React 02. Hello JSX</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>My Learning Notes This repo is my study notes My blog: Kaka&amp;rsquo;s blog My Medium: AIoT Taipei Categories Papers C++ Python Go Rust Data Structure and Algorithms (DSA) Operate System (OS) I/O Models: ÂêåÊ≠•„ÄÅÈùûÂêåÊ≠•„ÄÅÈòªÂ°û„ÄÅÈùûÈòªÂ°û Concurrency(‰∏¶Ë°å) Ëàá Parallel</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Rust Learning Notes Rust Programming Language book!
Rust by Example</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Generic Types, Traits, and Lifetimes Every programming language has tools for effectively handling the duplication of concepts. In Rust, one such tools is generic.
Generic Types Generics are abstract stand-ins for concrete types of other properties.
When we&amp;rsquo;re writing code, we can express the behavior of generics or how they relate to other generics without knowing what will be in their place when compiling and running code.
Traits A trait is a collection of methods defined for unknown type:`self`.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Rust Book Exercise This repo is the record that I exercise the book of Rust Programming Language book!
Rust version: 1.31.0 or later</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Visibility By default, the items in a module have private visibility, but this can be overridden with the pub modifier(keyword). Only the public items of a module can be accessed from outside the module scope.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Struct visibility Structs have an extral level of visibility with their fields. The visibility defaults to private, and can be overridden with the pub modifier.
This visibility only matters when a struct is accessed from outside the module where it is defined, and has the goal of hiding information(encapsulation).
Example If you use pub before a struct definition, you make the struct public. However, the struct&amp;rsquo;s fields are still private.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>The use declaration The use declaration can be used to bind a full path to a new name.
Example mod sound { pub mod instrument { pub fn clarinet() { // Function body code goes here } } } use crate:üîâ:instrument; fn main() { instrument::clarinet(); instrument::clarinet(); instrument::clarinet(); } as keyword You can use the as keyword to bind imports to a different name
Example use std::fmt::Result; use std::io::Result as IoResult; fn function1() -&amp;gt; Result {} fn function2() -&amp;gt; IoResult&amp;lt;()&amp;gt; {}</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>super and self The super and self keywords can be used in the path to remove ambiguity when accessing items and to prevent unnecessary hardcoding of paths.
super You can construct relative paths beginning with super. Doing so is like starting a filesystem path with ..: the path starts from the parent module, rather than current module.
Example mod instrument { fn clarinet() { super::breathe_in(); } } fn breathe_in() { } Advantage The reason you might want to choose a relative path starting with super rather than an absolute path starting with crate is that using super may make it easier to update your code to have a different module hierarchy, if the code defining the item and the code calling the item are moved together.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>File hierarchy Example $ tree . . |-- main.rs |-- my | |-- inaccessible.rs | |-- mod.rs | `-- nested.rs `-- split.rs build &amp;amp;&amp;amp; run $ rustc src/split.rs &amp;amp;&amp;amp; ./split</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Re-exporting Names with pub use When you bring a name into scope with the use keyword, the name being available in the new scope is private, example:
mod sound { pub mod instrument { pub fn clarinet() { println!(&amp;quot;sound::instrument::clarinet()&amp;quot;); } } } mod performance_group { use crate:üîâ:instrument; pub fn clarinet_trio() { instrument::clarinet(); instrument::clarinet(); instrument::clarinet(); } } fn main() { // error[E0603]: module `instrument` is private performance_group::instrument::clarinet(); } If you want to enable code calling your code to be able to refer to the type as if it was defined in that scope just as your code does, you can combine pub and use.</description></item></channel></rss>