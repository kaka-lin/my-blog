<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQLite on Kaka's Blog</title><link>https://kaka-lin.github.io/my-blog/tags/sqlite/</link><description>Recent content in SQLite on Kaka's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 11 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kaka-lin.github.io/my-blog/tags/sqlite/index.xml" rel="self" type="application/rss+xml"/><item><title>[DSA] KD Tree</title><link>https://kaka-lin.github.io/my-blog/2022/06/kdtree/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2022/06/kdtree/</guid><description>K-D Tree KD Tree 又稱 K 維樹 (K-dimensional tree)，是一種可以對 K 維資料進行劃分的資料結構。可以看成二元搜尋樹的一種延伸，的對空間中的維度做劃分。主要應用於多維</description></item><item><title>[Docker] 容器與虛擬機</title><link>https://kaka-lin.github.io/my-blog/2022/06/docker_vs_vm/</link><pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2022/06/docker_vs_vm/</guid><description>Docker - 容器 (Container) 與虛擬機 (VM) 簡單來說: 虛擬機 (Virtual Machine) 以作業系統為中心 容器 (Container) 以應用程式為中心 Container VM 應用程式為單位 作業系統為單位 依賴 Host OS 的 kernel 任意 Guest OS 封裝應用程</description></item><item><title>[Python] 負數取餘數</title><link>https://kaka-lin.github.io/my-blog/2022/06/the_mod_of_negative_number/</link><pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2022/06/the_mod_of_negative_number/</guid><description>Python 負數取餘數 在 Python 中，取餘數的公式與其他語言一樣為: r = a - n * [a // n] 其中 r 表示餘數，a 是被除數，n 是除數。 在快上面公式前須先了解 // 在 Python 中的特</description></item><item><title>[DSA] Linked List 介紹</title><link>https://kaka-lin.github.io/my-blog/2021/12/introduction/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2021/12/introduction/</guid><description>Linked List 介紹 Singly Linked List Access Compare with array: linked list: sequential access array: random access Maintenance Dummy Head Node Python code dummy = ListNode(None) dummy.next = head curr = dummy Doubly Linked List 在 Singly Linked List 時，當你要移除特定node時會很麻煩， 因為你不知道他的前一個</description></item><item><title>[C++] 多重繼承 (Multiple Inheritance)</title><link>https://kaka-lin.github.io/my-blog/2021/01/multiple_inheritance/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2021/01/multiple_inheritance/</guid><description>最近面試被問到多重繼承相關的問題，簡單做個紀錄～ Multiple Inheritance (多重繼承) An object or class can inherit characteristics and features from more than one parent object or parent class. Virtual base classes Virtual base classes are used in virtual inheritance, is a way of preventing multiple &amp;quot;instance&amp;quot; of a</description></item><item><title>[C++] i++ 與 ++i 的差別</title><link>https://kaka-lin.github.io/my-blog/2021/01/i-_and_-i/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2021/01/i-_and_-i/</guid><description>發現自己很容易搞混這兩個，於是簡單做個筆記記錄～ i++ 與 ++i i++: post-increment 在這一行程式完成之後，再進行+1的動作 ++i: pre-increment 先進行+1，再進行後面的動作 Example int x; int y; //</description></item><item><title>[Qt] Qt's Paint System</title><link>https://kaka-lin.github.io/my-blog/2020/10/01_paint_system/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/10/01_paint_system/</guid><description>前言 最近因為再研究labeling tool的關係，於是又重新把Qt的繪圖系統重新研究了一下 Qt&amp;rsquo;s Paint System Qt's paint system enables painting on screen and print devices using the same API, and is primarily based on the QPainter, QPaintDevice,</description></item><item><title>[React] 01 - Hello React</title><link>https://kaka-lin.github.io/my-blog/2020/09/01_hello_react/</link><pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/09/01_hello_react/</guid><description>最近因為專案需要用到，於是又打開了兩年前在Udemy上買的React課程複習， 驚喜的發現講師有Update了2020版本上去，於是打算邊上課</description></item><item><title>[React] 02 - JSX 介紹</title><link>https://kaka-lin.github.io/my-blog/2020/09/02_hello_jsx/</link><pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/09/02_hello_jsx/</guid><description>JSX 介紹 首先看看下面這個變數宣告 const element = &amp;lt;h1&amp;gt;你好，世界！&amp;lt;/h1&amp;gt;; 這個有趣的標籤語法不是一個字串也不是HTML。 這</description></item><item><title>[Go] Ch1: Go Basics - 08 Concurrency</title><link>https://kaka-lin.github.io/my-blog/2020/08/08_concurrency/</link><pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/08/08_concurrency/</guid><description>Concurrency Go provides concurrency features as part of the core language. This module goes over goroutines and channels, and how they are used to implement different concurrency patterns. 複習: Concurrency and Parallelism Goroutines A goroutine is a lightweight thread managed by Go runtime. goroutine是輕量級的執行緒(lightwe</description></item><item><title>[DS] Build JupyterHub with docker</title><link>https://kaka-lin.github.io/my-blog/2020/08/jupyterhub/</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/08/jupyterhub/</guid><description>JupyterHub Use Docker to build a JupyterHub for multiple users
Notices Before your start to build a JupyterHub with docker, please download the relative file at example.
Enable HTTPS (SSL encryption) Generate a self-signed certificate with openssl, as below:
create a self-signed certificate. For example, the following command will create a certificate valid for 365 days with both the key and certificate data written to the same file:
$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout jupyterhub.</description></item><item><title>[Python] Ch3: Coroutine - 01 Generator</title><link>https://kaka-lin.github.io/my-blog/2020/08/01_generator/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/08/01_generator/</guid><description>Generator functions allow you to declare a function that behaves like an iterator. 在開始介紹Generator前，先讓我們來看看Iterator。 Iterator vs Iterable Iteration: 當我們用一個循環(ex: for loop)遍歷一</description></item><item><title>[Go] Ch1: Go Basics - 07 Methods and Interfaces</title><link>https://kaka-lin.github.io/my-blog/2020/08/07_methods_interfaces/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/08/07_methods_interfaces/</guid><description>Methods and Interfaces Learn how to define methods on types, how to declare interfaces, and how to put everything together. Methods (方法) Go does not classes. However, you can define methods on types. A method is a function with a special receiver argument. The receiver appears in its own argument list between the func keword and the method name. Example The Abs() method has a receiver of</description></item><item><title>[OS] Coroutine (協程)</title><link>https://kaka-lin.github.io/my-blog/2020/08/coroutine/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/08/coroutine/</guid><description>先來看一下Wiki上關於Coroutine的解釋: Coroutines are computer program components that generalize subroutines for non-preemptive multitasking (協同運作多工), by allowing execution to be suspended and resumed. 簡單來說，Coroutine就是一</description></item><item><title>[OS] Concurrency(並行) 與 Parallelism(平行)</title><link>https://kaka-lin.github.io/my-blog/2020/07/concurrency_parallelism/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/concurrency_parallelism/</guid><description>前言 最近在研究Asynchronous Model，上一篇介紹了同步、非同步、Blocking、Non-Blocking的觀念及Linux的I</description></item><item><title>[OS] I/O Models: 同步、非同步、阻塞、非阻塞</title><link>https://kaka-lin.github.io/my-blog/2020/07/io_models/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/io_models/</guid><description>在開發I/O相關程式時常常會遇到以下這四種名詞: 同步(Synchronous) 非同步(Asynchronous) 阻塞(Blocking) 非阻</description></item><item><title>[Python] Ch2: Process Management - 02 Python 多行程/多處理程序(Multi-Processing)</title><link>https://kaka-lin.github.io/my-blog/2020/07/02_multiprocessing/</link><pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/02_multiprocessing/</guid><description>行程/處理程序(Process) 複習作業系統(Operating System)中的對於行程(Process)的解釋： 行程(Process)是</description></item><item><title>[Go] Ch1: Go Basics - 06 Advanced Function</title><link>https://kaka-lin.github.io/my-blog/2020/07/06_advanced_function/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/06_advanced_function/</guid><description>Function as Arguments In Go, function is also a type. So we can pass function as another function&amp;rsquo;s parameters. 當我們將function當成參數使用時，必須在參數列表列出funtion本身的參數type與及其所需的</description></item><item><title>[Python] Ch2: Process Management - 01 Python 多執行緒(Multi-Thread)</title><link>https://kaka-lin.github.io/my-blog/2020/07/01_multithread/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/01_multithread/</guid><description>執行緒(Thread) 複習作業系統(Operating System)中的對於執行緒(thread)的解釋： 執行緒(thread)是OS能夠進</description></item><item><title>[Go] Ch1: Go Basics - 05 Go Data Structure: `Maps`</title><link>https://kaka-lin.github.io/my-blog/2020/07/05_maps/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/05_maps/</guid><description>Maps A map maps key to value. Golang provides map data structure which implements hashtable. 1. Creating a Maps The zero value of a map is nil. A nil map has no keys, nor can keys be added. Method 1: like array // nil map var m map[keyTpye]valueType Note: 如果使用此方法來create map，還需要</description></item></channel></rss>