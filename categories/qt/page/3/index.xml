<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Qt on Kaka's Blog</title><link>https://kaka-lin.github.io/my-blog/categories/qt/</link><description>Recent content in Qt on Kaka's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 01 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kaka-lin.github.io/my-blog/categories/qt/index.xml" rel="self" type="application/rss+xml"/><item><title>[OS] I/O Models: 同步、非同步、阻塞、非阻塞</title><link>https://kaka-lin.github.io/my-blog/2020/07/io_models/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/io_models/</guid><description>在開發I/O相關程式時常常會遇到以下這四種名詞: 同步(Synchronous) 非同步(Asynchronous) 阻塞(Blocking) 非阻</description></item><item><title>[Python] Ch2: Process Management - 02 Python 多行程/多處理程序(Multi-Processing)</title><link>https://kaka-lin.github.io/my-blog/2020/07/02_multiprocessing/</link><pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/02_multiprocessing/</guid><description>行程/處理程序(Process) 複習作業系統(Operating System)中的對於行程(Process)的解釋： 行程(Process)是</description></item><item><title>[Go] Ch1: Go Basics - 06 Advanced Function</title><link>https://kaka-lin.github.io/my-blog/2020/07/06_advanced_function/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/06_advanced_function/</guid><description>Function as Arguments In Go, function is also a type. So we can pass function as another function&amp;rsquo;s parameters. 當我們將function當成參數使用時，必須在參數列表列出funtion本身的參數type與及其所需的</description></item><item><title>[Python] Ch2: Process Management - 01 Python 多執行緒(Multi-Thread)</title><link>https://kaka-lin.github.io/my-blog/2020/07/01_multithread/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/01_multithread/</guid><description>執行緒(Thread) 複習作業系統(Operating System)中的對於執行緒(thread)的解釋： 執行緒(thread)是OS能夠進</description></item><item><title>[Go] Ch1: Go Basics - 05 Go Data Structure: `Maps`</title><link>https://kaka-lin.github.io/my-blog/2020/07/05_maps/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/05_maps/</guid><description>Maps A map maps key to value. Golang provides map data structure which implements hashtable. 1. Creating a Maps The zero value of a map is nil. A nil map has no keys, nor can keys be added. Method 1: like array // nil map var m map[keyTpye]valueType Note: 如果使用此方法來create map，還需要</description></item><item><title>[Go] Ch1: Go Basics - 04 Go Data Structure: `Array` &amp; `Slice`</title><link>https://kaka-lin.github.io/my-blog/2020/07/04_array_slice/</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/04_array_slice/</guid><description>Array 1. Creating an Array The type [n]T is an array of n values of type T. The expression var a [10]int An array&amp;rsquo;s length is part of its type, so arrays cannot be resized. But Go provides a convenient way of working with array. 2. Array initialize a := [6]int{2, 3, 5, 7, 11, 13} // or a := []int{2, 3, 5, 7, 11, 13} Slices A slice is</description></item><item><title>[Go] Ch1: Go Basics - 03 Go Data Structure: `Structs`</title><link>https://kaka-lin.github.io/my-blog/2020/07/03_structs/</link><pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/03_structs/</guid><description>Structs (Structures) A struct or structure is a collection of fields. 1. Defining a struct Using struct keyword to create a new structure type. type StructName struct { field1 fieldType1 field2 fieldType2 ... } Example: type Vertex struct { X int Y int } 2. Accessing Struct Fields (Members) Struct fields are accessed using a dot. v := Vertrx{1, 2} v.X = 4 fmt.Println(v.X) // 4 Pointers to Structs 1.</description></item><item><title>[Go] Ch1: Go Basics - 02 Flow Control</title><link>https://kaka-lin.github.io/my-blog/2020/07/02_flow_control/</link><pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/02_flow_control/</guid><description>For Go has only one looping construct, the foor loop for &amp;lt;init state&amp;gt;; &amp;lt;condition&amp;gt;; &amp;lt;post state&amp;gt; sum := 0 for i := 0; i &amp;lt; 10; i++ { sum += i } Go的for看起來跟C或Java中的依樣，但是沒有 ()，但{}是必要的，如上</description></item><item><title>[Go] Ch1: Go Basics - 01 Go Basics</title><link>https://kaka-lin.github.io/my-blog/2020/07/01_go_basics/</link><pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/01_go_basics/</guid><description>Packages (套件) 每個 Go Program 都是由套件(packages)組成的 程式運行的入口是: package main package main func main() {} Import import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) Exported names In Go, a name is exported if it begins with a capital letter. For example, Pi is an exported</description></item><item><title>[DSA] Array</title><link>https://kaka-lin.github.io/my-blog/2020/07/01_array/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/07/01_array/</guid><description>What is Array? 可以想像成櫃子，櫃子上有某些連續的編號 &amp;ndash;&amp;gt; 有編號的櫃子 Memory is (Generally Viewed as) Array 記憶體就是一個很大的Array address就是index Array as Memory Block in C/C++</description></item><item><title>[Python] Ch1: Python Basics - 05 Function</title><link>https://kaka-lin.github.io/my-blog/2020/06/05_function/</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/05_function/</guid><description>Function 函式 def 函式名稱(參數): 程式碼 def printf(text): print(&amp;quot;[Out]: {}&amp;quot;.format(text)) printf('Hello world!') [Out]: Hello world! 閏年 根據維基百科，分辨平閏年的方法為： 公元年份除以4不可整除，為平年。 公元年份除以4可整除</description></item><item><title>[Python] Ch1: Python Basics - 04 Dictionary</title><link>https://kaka-lin.github.io/my-blog/2020/06/04_dictionary/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/04_dictionary/</guid><description>Dictionary 字典 在字典裡，皆由key(鍵)和value(值)組成 dict = {key1 : value1, key2 : value2 } kaka = {'firstname':'lin', 'age': 28, 'height': 175} print(kaka) {'firstname': 'lin', 'age': 28, 'height': 175} 取得 Dictionary 裡有幾個元素: len() print(len(kaka)) [Out]: 3 取得 Dictionay 裡的資</description></item><item><title>[DB] Sqlalchemy Basics</title><link>https://kaka-lin.github.io/my-blog/2020/06/sqlalchemy-basics/</link><pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/sqlalchemy-basics/</guid><description>SQLAlchemy - basics SQLAlchemy - Tutorial import sqlalchemy from sqlalchemy import create_engine, Table from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, ForeignKey, Integer, String, Numeric from sqlalchemy.orm import sessionmaker sqlalchemy.__version__ Connect Database # SQLite #connect_db = 'sqlite:///test.db' # MySQL connect_db = 'mysql+mysqldb://root:&amp;lt;passwd&amp;gt;@35.201.196.222/kaka_test' ''' create_engine 此時只有建立SQLAlchemy Engine instance(</description></item><item><title>[Python] Ch1: Python Basics - 03 List</title><link>https://kaka-lin.github.io/my-blog/2020/06/03_list/</link><pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/03_list/</guid><description>List 串列 List 用來儲存一連串有順序的資料，如： countries = ['Taiwan', 'Janpan', 'America'] print(countries) ['Taiwan', 'Janpan', 'America'] 取得 List 裡有幾個元素: len() length = len(countries) length [Out]: 3 取得List 裡的元素 list_name[index] countries[0] [Out]: 'Taiwan' 取得最後一個元素 list[-1] print(countries[-1])</description></item><item><title>[DB] Mysql Basics</title><link>https://kaka-lin.github.io/my-blog/2020/06/mysql-basics/</link><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/mysql-basics/</guid><description>MySQL - Basics SQL Tutorial MySQL Documentation MySQL - Tutorial Quickstart for Cloud SQL for MySQL Load ipython-sql ipython-sql: 是jupyter notebook的extension，用來擴充jupyter對SQL的支援 其底層是使用</description></item><item><title>[DB] Sqlite Basics</title><link>https://kaka-lin.github.io/my-blog/2020/06/sqlite-basics/</link><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/sqlite-basics/</guid><description>SQLite - Basics SQL - Tutorial SQL As Understood By SQLite(官網) SQLite - Tutorial Load ipython-sql ipython-sql: 是jupyter notebook的extension，用來擴充jupyter對SQL的支</description></item><item><title>[Python] Ch1: Python Basics - 02 Flow Control</title><link>https://kaka-lin.github.io/my-blog/2020/06/02_flow_control/</link><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/02_flow_control/</guid><description>Flow Control Python if ... else The general syntax for Python&amp;rsquo;s if statement is this: if condition1: # statement1 for True condition1 elif condition2 : # statement2 for True condition2 elif condition3 : # statement3 for True condition3 else: # statements for each condition False score = int(input(&amp;quot;請輸入成績&amp;q</description></item><item><title>[DB] Database Basics</title><link>https://kaka-lin.github.io/my-blog/2020/06/db_basics/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/db_basics/</guid><description>Database Basics Database Basics What is a Database The basic functions for manipulating a database: CRUD Database Management System (DBMS) 資料庫的類型 關聯式資料庫 非關聯式資料庫(NoSQL) SQL與NoSQL差異 Database Transaction SQL SQL語法 SQL - 四種語</description></item><item><title>[DevOps] Gitlab CI/CD</title><link>https://kaka-lin.github.io/my-blog/2020/06/gitlab_ci_cd/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/gitlab_ci_cd/</guid><description>GitLab CI/CD GitLab CI/CD is a powerful tool built into GitLab that allows you to apply all the continuous methods to your software with no third-party application or integration needed. Continuous Integration (CI): 持續整合 Continuous Delivery (CD): 持續交付 Continuous Deployment (CD): 持續發佈 How GitLab CI/CD works GitLab offers a continuous integration service. For each commit or push to trigger your CI</description></item><item><title>[DS] Google Trends 01: Operate with Python</title><link>https://kaka-lin.github.io/my-blog/2020/06/01_google_trends_and_python/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/2020/06/01_google_trends_and_python/</guid><description>Get and Analysis the result of Google Trends with Python Google Trends (Google搜尋趨勢) 是由Google 提供的線上搜尋趨勢服務，可以簡單的看出最近哪些關鍵字是熱門的。 但大規模分析 Google</description></item></channel></rss>