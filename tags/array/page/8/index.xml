<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Array on Kaka's Blog</title><link>https://kaka-lin.github.io/my-blog/tags/array/</link><description>Recent content in Array on Kaka's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 04 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kaka-lin.github.io/my-blog/tags/array/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Modules Rust provides a powerful module system that can be used to hierarchically split code in logical units(modules), and manage visibility (public/private) between them.
A module is a collection of items: functions, structs, traits, impl block, and even other modules.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Library Let&amp;rsquo;s create a library, and then see how to link it to another crate.
pub fn public_function() { println!(&amp;quot;called rary's `public_function()`&amp;quot;); } fn private_function() { println!(&amp;quot;called rary's `private_function()`&amp;quot;); } pub fn indirect_access() { print!(&amp;quot;called rary's `indirect_access()`, that\n&amp;gt; &amp;quot;); private_function(); } $ rustc --crate-type=lib src/libtest.rs $ ls lib* liblibtest.rlib Libraries get prefixes with &amp;quot;lib&amp;quot;, and default they get named after their crate file, but this default name can be overridden usinf the crate_name attribute.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>extern crate To link a crate to this new library, the extern crate declaration must be used. This will not onlt link the library, but also import all its items under a module named the same as the library. The visibility rules that apply to modules also apply to libraries.
Example Filename: src/main.rs
extern crate libtest; fn main() { libtest::public_function(); # 1. build library crate $ rustc --crate-type=lib --out-dir=src src/libtest.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Crates A crate is a compilation unit in Rust. Whenever rustc some_file.rs is called, some_file.rs is treated as the crate file.
If some_file.rs has mod declarations in it, then the contents of module files would be insert in places where mod declarations in the crate file are found, before running the compiler over it. In other words, modules do not get compiled individually, only crates get compiled.
A crate can be compiled into a binary or into a library.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Cargo</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Iterators The Iterator trait is uesd to implement iterators over collections such as arrays.
The trait requires only a meths to be defined for the next element, which may be manually defined in an impl block or automatically defined (as in arrays and ranges).
As a point of convenience for common situations, the for construct turns some collections into iterators using the .into_iterator() method.
Example struct Fibonacci { curr: u32, next: u32, } // Implement `Iterator` for `Fibonacci`.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Traits</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>panic The simples error handling mechanism we will see is panic.
It prints an error message, starts unwinding the task, and usually exits the program.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Multiple error types Somtimes an Option needs to interact with a Reasult, or a Result&amp;lt;T, Error1&amp;gt; need to interact with a Result&amp;lt;T, Error2&amp;gt;. In those cases, we want to manage our different error types in a way that makes them composable and easy to interact with.
Example In the following code, two instances of unwrap generate different error types.
Vec::first returns an Option, while parse::&amp;lt;i32&amp;gt; returns a Result&amp;lt;i32, ParseIntError&amp;gt;
fn double_first(vec: Vec&amp;lt;&amp;amp;str&amp;gt;) -&amp;gt; i32 { let first = vec.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Pulling Results out of Options The most basic way of handling mixed error types is to just embed them in each other.
Example use std::num::ParseIntError; fn double_first(vec: Vec&amp;lt;&amp;amp;str&amp;gt;) -&amp;gt; Option&amp;lt;Result&amp;lt;i32, ParseIntError&amp;gt;&amp;gt; { vec.first().map(|first| { first.parse::&amp;lt;i32&amp;gt;().map(|n| 2 * n) }) } fn main() { let numbers = vec![&amp;quot;42&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; let empty = vec![]; let strings = vec![&amp;quot;tofu&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; println!(&amp;quot;The first doubled is {:?}&amp;quot;, double_first(numbers)); println!(&amp;quot;The first doubled is {:?}&amp;quot;, double_first(empty)); // Error 1: the input vector is empty println!</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Iterating over Results An Iter::map operation might fail, for example:
fn main() { let strings = vec![&amp;quot;tofu&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; let possible_numbers: Vec&amp;lt;_&amp;gt; = strings .into_iter() .map(|s| s.parse::&amp;lt;i32&amp;gt;()) .collect(); println!(&amp;quot;Results: {:?}&amp;quot;, possible_numbers); } Let&amp;rsquo;s step through strategies for handling this.
Ignore the failed items with filter_map filter_map calls a function and filters out the resultes that are None.
fn main() { let strings = vec![&amp;quot;tofu&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; let possible_numbers: Vec&amp;lt;_&amp;gt; = strings .</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Option &amp;amp; unwrap Option Option&amp;lt;T&amp;gt; is an enum in the std library.
enum Option&amp;lt;T&amp;gt; { Some(T), None, } Option&amp;lt;T&amp;gt; is used when absence is a possible.
It manifests itself as one of two &amp;ldquo;options&amp;rdquo;:
Some(T)
An element of type T was found
None:
No element was found
unwrap Is a shortcut method that is implement just like the match expression.
If the Option value is Some(T) variant, unwrap will return the value T inside the Some(T).</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Combinators: map match is a valid method for handling Option. However, you may enventually find heavy usage tedious, especially with operations only valid with input. In this case, combinators can be used to manage control flow in a modular fashion(模組化方式). map() Is a Option&amp;rsquo;s built in method. A combinator for the simple mpping of Some -&amp;gt;</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Combinators: and_then map() was described as a chainable way to simplify match statements. However, using map() on a function that returns an Option&amp;lt;T&amp;gt; results in the nested Option&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;. Chaining multiple calls together can then become confusing. That&amp;rsquo;s where another combinator called and_then(), known in some language as flatmap, comes in.
and_then() Calling its function input with the wrapped value and returns the result.
Some -&amp;gt; Some, None -&amp;gt; None
pub fn and_then&amp;lt;U, F&amp;gt;(self, f: F) -&amp;gt; Option&amp;lt;U&amp;gt; where F: FnOnce(T) -&amp;gt; Option&amp;lt;U&amp;gt;,</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Result Result is an richer version of the Option type that describes possible error instead of possible absence.
enum Result&amp;lt;T, E&amp;gt; { Ok(T), Err(E), } Ok&amp;lt;T&amp;gt;: An element T was found
Err&amp;lt;E&amp;gt;: An error was found with element E
Like Option, Result has many methods associated with it.
For example:
unwrap():
either yields the element T or panics
For case handling, there are many combinators between Result and Option that overlap.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>map for Result Panicking in the previous example&amp;rsquo;s multiply does not make for robuts code. Generally, we want to return the error to the caller so it can decide what is the right way to respond to errors. We first need to know what kind of error type we are dealing with. To determine the Err type, we look to parse(), which is implemented with the FromStr tarit for i32.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>aliases for Result How about when we want ot reuse a specific Result type many times? -&amp;gt; aliases. Aliasing The type statement can be used to give a new name to an existing type. Exmaple At a module level, creating aliases can be particularly helpful. Errors found in a specific module often have the same Err type, so a single alias can succinct</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Early returns</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Introducing ? Sometimes we just want the simplicity of unwrap without the possible of a panic.
Until now, unwrap has forced us to nest deeper and deeper when what we really was to get the value out.
=&amp;gt; This is exactly the purpose of ?
Upon finding an Err, there are two valid actions to take:
panic! which we already decided to try to avoid if possibe. return because an Err means it cannot be handled.</description></item><item><title/><link>https://kaka-lin.github.io/my-blog/1/01/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaka-lin.github.io/my-blog/1/01/readme/</guid><description>Error handling</description></item></channel></rss>